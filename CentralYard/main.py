import sqlite3
import telebot
from telebot import types
import pandas as pd
from io import BytesIO
import requests
from price import price_grandmaster, price_master
from barber_info import Kozachuk_Andriy, Munno_Nikola, Sergiy_Zaika, Viktor_Kozlovskyi, Artem_Scherban, \
    Dmytro_Zhurovets, Denis_Isaenko
from appointment import book_staff, book_dates, services, finallys, book_time


token = '6979055272:AAHVUQ6wQbrlQuwd8Z5v1GuFy3IIF7Pb6lk'
bot = telebot.TeleBot(token)

flag = False
staff_category_map = {
    '227400': 10593304,
    '250724': 10593304,
    '869054': 10593304,
    '227395': 10593304,
    '194619': 10593304,
    '2119274': 1100495,
    '2119275': 1100495
}


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {message.from_user.first_name}!\n'
                                      f'–ó–ª—ñ–≤–∞ –∑–Ω–∏–∑—É –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –º–µ–Ω—é –∑—ñ –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏\n‚¨áÔ∏è')


@bot.message_handler(commands=['price'])
def price(message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton("–í–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç—Ä–∏–∂–∫–∏ C—Ç–∞—Ä—à–æ–≥—É –ú–∞–π—Å—Ç—Ä—É", callback_data='price_grandmaster')
    button_2 = types.InlineKeyboardButton("–í–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç—Ä–∏–∂–∫–∏ –ú–∞–π—Å—Ç—Ä—É", callback_data='price_master')
    keyboard.add(button, button_2)
    bot.send_message(message.chat.id, "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∞—Ä—Ç—ñ—Å—Ç—åüíµ\n\n<u><b>–°—Ç–∞—Ä—à–∏–π –ú–∞—Å—Ç–µ—Ä:</b></u>\n–ú—É–Ω–Ω–æ –ù—ñ–∫–æ–ª–∞\n"
                                      "–ö–æ–∑–ª–æ–≤—Å—å–∫–∏–π –í—ñ–∫—Ç–æ—Ä\n–ê—Ä—Ç–µ–º –©–µ—Ä–±–∞–Ω—å\n–°–µ—Ä–≥—ñ–π –ó–∞—ó–∫–∞\n–ö–æ–∑–∞—á—É–∫ –ê–Ω–¥—Ä—ñ–π"
                                      "\n\n<u><b>–ú–∞–π—Å—Ç–µ—Ä</b></u>:\n–î–µ–Ω–∏—Å –Ü—Å–∞—î–Ω–∫–æ\n–î–º–∏—Ç—Ä–æ –ñ–∏—Ä–æ–≤–µ—Ü—å\n\n"
                                      "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –±—ñ–ª—å—à –¥–µ–ª–∞—Ç–∞–ª—å–Ω—É \n—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞—Ä–±–µ—Ä—ñ–≤ —É –º–µ–Ω—é \n"
                                      "–∫–æ–º–∞–Ω–¥ '–Ü–Ω—Ñ–æ–º–∞—Ä—Ü—ñ—è –ø—Ä–æ –±–∞—Ä–±–µ—Ä–∞' \n–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å - /barber_info",
                     reply_markup=keyboard, parse_mode='HTML')


@bot.message_handler(commands=['barber_info'])
def barber_info(message):
    photo_1 = open('photo/–ö–æ–∑–∞—á—É–∫ + –ú—É–Ω–Ω–æ.jpeg', 'rb')
    bot.send_photo(message.chat.id, photo_1)
    keyboard_1 = types.InlineKeyboardMarkup(row_width=2)
    button = types.InlineKeyboardButton("–ö–æ–∑–∞—á—É–∫ –ê–Ω–¥—Ä—ñ–π", callback_data='Kozachuk_Andriy')
    button_2 = types.InlineKeyboardButton("–ú—É–Ω–Ω–æ –ù—ñ–∫–æ–ª–∞", callback_data='Munno_Nikola')
    keyboard_1.add(button, button_2)
    bot.send_message(message.chat.id, "–°—Ç–∞—Ä—à–∏–π –º–∞–π—Å—Ç–µ—Ä:", reply_markup=keyboard_1)

    photo_2 = open('photo/–ó–∞—ó–∫–∞ + –ö–æ–∑–ª–æ–≤—Å–∫–∏–π .jpeg', 'rb')
    bot.send_photo(message.chat.id, photo_2)
    keyboard_2 = types.InlineKeyboardMarkup(row_width=2)
    button_3 = types.InlineKeyboardButton("–ó–∞—ó–∫–∞ C–µ—Ä–≥—ñ–π", callback_data='Sergiy_Zaika')
    button_4 = types.InlineKeyboardButton("–ö–æ–∑–ª–æ–≤—Å—å–∫–∏–π –í—ñ–∫—Ç–æ—Ä", callback_data='Viktor_Kozlovskyi')
    keyboard_2.add(button_3, button_4)
    bot.send_message(message.chat.id, "–°—Ç–∞—Ä—à–∏–π –º–∞–π—Å—Ç–µ—Ä:", reply_markup=keyboard_2)

    photo_3 = open('photo/–©–µ—Ä–±–∞–Ω—å.jpeg', 'rb')
    bot.send_photo(message.chat.id, photo_3)
    keyboard_3 = types.InlineKeyboardMarkup(row_width=2)
    button_6 = types.InlineKeyboardButton("–ê—Ä—Ç–µ–º –©–µ—Ä–±–∞–Ω—å", callback_data='Artem_Scherban')
    keyboard_3.add(button_6)
    bot.send_message(message.chat.id, "–°—Ç–∞—Ä—à–∏–π –º–∞–π—Å—Ç–µ—Ä:", reply_markup=keyboard_3)

    photo_4 = open('photo/–ñ—É—Ä–æ–≤–µ—Ü—å + –Ü—Å–∞—î–Ω–∫–æ.jpeg', 'rb')
    bot.send_photo(message.chat.id, photo_4)
    keyboard_4 = types.InlineKeyboardMarkup(row_width=2)
    button_7 = types.InlineKeyboardButton("–î–º–∏—Ç—Ä–æ –ñ–∏—Ä–æ–≤–µ—Ü—å", callback_data='Dmytro_Zhurovets')
    button_8 = types.InlineKeyboardButton("–î–µ–Ω–∏—Å –Ü—Å–∞—î–Ω–∫–æ", callback_data='Denis_Isaenko')
    keyboard_4.add(button_7, button_8)
    bot.send_message(message.chat.id, "–ú–∞–π—Å—Ç–µ—Ä:", reply_markup=keyboard_4)


@bot.message_handler(commands=['appointment'])
def check_flag(message):
    global flag
    my_personal_id = message.from_user.id
    conn = sqlite3.connect("register.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM registration")
    result = cursor.fetchall()
    db_user_ids = [row[0] for row in result]

    if my_personal_id in db_user_ids:
        flag = True
        make_appointment(message)
    else:
        registration(message)

    conn.close()


def registration(message):
    bot.send_message(message.chat.id, "–í–∏ –≤–ø–µ—Ä—à–µ –∑–∞–π—à–ª–∏ –¥–æ –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—É —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞, –ø—Ä–æ—Å–∏–º–æ –í–∞—Å "
                                      "–∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n–î–∞–Ω–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç—Ä–µ–±–∞ –∑–ø–æ–≤–Ω–∏—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑, "
                                      "–Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∞—Å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î.\n\n"
                                      "–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è (–±–∞–∂–∞–Ω–æ –ø–æ–≤–Ω–µ): ")
    bot.register_next_step_handler(message, registration_name)


def registration_name(message):
    name = message.text
    if name.startswith('/'):
        bot.send_message(message.chat.id, '–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ñ—ó.\n\n–ó–ª—ñ–≤–∞ –∑–Ω–∏–∑—É –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ '
                                          '–º–µ–Ω—é –∑—ñ –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏\n‚¨áÔ∏è')
        return
    bot.send_message(message.chat.id, '–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –º–æ–±—ñ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ')
    bot.register_next_step_handler(message, registration_phone, name)


def registration_phone(message, name):
    phone = message.text
    if phone.startswith('/'):
        bot.send_message(message.chat.id, '–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ñ—ó.\n\n–ó–ª—ñ–≤–∞ –∑–Ω–∏–∑—É –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ '
                                          '–º–µ–Ω—é –∑—ñ –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏\n‚¨áÔ∏è')
        return
    bot.send_message(message.chat.id, '–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É: ')
    bot.register_next_step_handler(message, registration_mail, name, phone)


def registration_mail(message, name, phone):
    mail = message.text
    if mail.startswith('/'):
        bot.send_message(message.chat.id, '–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ñ—ó.\n\n–ó–ª—ñ–≤–∞ –∑–Ω–∏–∑—É –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ '
                                          '–º–µ–Ω—é –∑—ñ –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏\n‚¨áÔ∏è')
        return
    personal_id = message.from_user.id
    conn = sqlite3.connect("register.db")
    cursor = conn.cursor()

    cursor.execute("INSERT INTO registration (id, name, phone, email) VALUES (?, ?, ?, ?)",
                   (personal_id, name, phone, mail))

    conn.commit()
    conn.close()
    make_appointment(message)


def make_appointment(message):
    staff_list = book_staff()
    my_personal_id = message.from_user.id
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(name, callback_data=f'staff_id_{staff_id}_{my_personal_id}')
               for name, staff_id in staff_list.items()]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ë–∞—Ä–±–µ—Ä–∞, –¥–æ —è–∫–æ–≥–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('staff_id_'))
def handle_chosen_staff(call):
    staff_id = call.data.split('_')[-2]
    my_personal_id = call.data.split('_')[-1]
    staff_list = book_staff()
    chosen_staff = next((name for name, id_ in staff_list.items() if id_ == int(staff_id)), None)
    bot.send_message(call.message.chat.id, f"–û–±—Ä–∞–Ω –ë–∞—Ä–±–µ—Ä ‚úÇÔ∏è: {chosen_staff}")
    book_services(call, staff_id, chosen_staff, my_personal_id)


def book_services(call, staff_id, chosen_staff, my_personal_id):
    booking_services = services(staff_category_map.get(staff_id))
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton(name, callback_data=f'service_id_{staff_id}_{service_id}_{my_personal_id}')
        for name, service_id in booking_services.items()
    ]
    keyboard.add(*buttons)

    bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –±–∞—Ä–±–µ—Ä—à–æ–ø—É", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('service_id_'))
def handle_book_services(call):
    data_parts = call.data.split('_')
    staff_id, service_id, my_personal_id = data_parts[2:5]

    booking_services = services(staff_category_map.get(staff_id))
    service_name = next((name for name, id_ in booking_services.items() if id_ == int(service_id)), None)

    bot.send_message(call.message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Å–ª—É–≥—É: {service_name}")
    booking_dates(call, staff_id, service_id, my_personal_id, service_name)


def booking_dates(call, staff_id, service_id, my_personal_id, service_name):
    booking_date = book_dates(staff_id)
    if not booking_date:
        bot.send_message(call.message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton(date, callback_data=f"date_{staff_id}_{date}_{my_personal_id}_{service_id}")
        for date in booking_date
    ]
    keyboard.add(*buttons)
    bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É üìÖ", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_selected_date(call):
    print(call.data)
    selected_date = call.data.split('_')[-3]
    staff_id = call.data.split('_')[-4]
    my_personal_id = call.data.split('_')[-2]
    service_id = call.data.split('_')[-1]
    bot.send_message(call.message.chat.id, f"–û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date}")
    booking_times(call, selected_date, staff_id, my_personal_id, service_id)


def booking_times(call, selected_date, staff_id, my_personal_id, service_id):
    book_list = book_time(staff_id, selected_date)
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton(time, callback_data=f'time_{staff_id}_{selected_date}_{time}_{my_personal_id}_'
                                                       f'{service_id}')
        for time in book_list
    ]
    keyboard.add(*buttons)
    bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å ‚è∞", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('time_'))
def handle_selected_time(call):
    data_parts = call.data.split('_')
    selected_time = data_parts[-3]
    staff_id = data_parts[-5]
    selected_date = data_parts[-4]
    my_personal_id = call.data.split('_')[-2]
    service_id = call.data.split('_')[-1]
    bot.send_message(call.message.chat.id, f"–û–±—Ä–∞–Ω —á–∞—Å: {selected_time}")
    finally_info_book(call, staff_id, selected_date, selected_time, my_personal_id, service_id)


def finally_info_book(call, staff_id, selected_date, selected_time, my_personal_id, service_id):
    staff_list = book_staff()
    chosen_staff = next((name for name, id_ in staff_list.items() if id_ == int(staff_id)), None)
    booking_services = services(staff_category_map.get(staff_id))
    service_name = next((name for name, id_ in booking_services.items() if id_ == int(service_id)), None)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = types.InlineKeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å', callback_data=f'book_yes_{staff_id}_{service_id}_'
                                                                            f'{selected_date}_{my_personal_id}_'
                                                                            f'{selected_time}')
    buttons_1 = types.InlineKeyboardButton('–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∞', callback_data='book_no')
    keyboard.add(buttons, buttons_1)
    bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Å—É:\n\n–í–∏ –æ–±—Ä–∞–ª–∏ –±–∞—Ä–±–µ—Ä–∞: {chosen_staff}\n"
                                           f"–í–∏ –æ–±—Ä–∞–ª–∏ –¥–∞—Ç—É –≤—ñ–∑–∏—Ç—É: {selected_date}\n–í–∏ –æ–±—Ä–∞–ª–∏ —á–∞—Å: {selected_time}\n"
                                           f"–í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Å–ª—É–≥—É: {service_name}\n\n–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ,"
                                           f" –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∂–∞—Ç–∏ –¢–∞–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('book_yes'))
def booking_yes(call):
    staff_id = call.data.split('_')[-5]
    service_id = call.data.split('_')[-4]
    selected_date = call.data.split('_')[-3]
    my_personal_id = call.data.split('_')[-2]
    selected_time = call.data.split('_')[-1]
    conn = sqlite3.connect("register.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, phone, email FROM registration WHERE id = ?", (my_personal_id,))
    user_info = cursor.fetchone()
    name, phone, email = user_info
    success = finallys(service_id, staff_id, selected_date, selected_time, name, phone, email)
    if success:
        bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ! ")
    else:
        bot.send_message(call.message.chat.id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ "
                                               "–¥–æ –Ω–∞—à–µ–≥–æ –±–∞—Ä–±–µ—Ä–∞: \n+38(068)46-46-46-0\n\n–°–∫–æ—Ä—ñ—à –∑–∞ –≤—Å–µ —Ü—è –ø–æ–º–∏–ª–∫–∞ "
                                               "–∑–≤—è'—è–∑–∞–Ω–∞ –∑ —Ç–∏–º, —â–æ –π–¥–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç —á–∞—Å—É, —Ç–æ–º—É —É—Ç–æ—á–Ω—é–π—Ç–µ —á–∞—Å –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º "
                                               "–∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —á–∞—Å")

    conn.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith('book_no'))
def booking_no(call):
    bot.send_message(call.message.chat.id, '–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å\n–ó–ª—ñ–≤–∞ –∑–Ω–∏–∑—É –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –º–µ–Ω—é –∑—ñ –≤—Å—ñ–º–∞ '
                                           '—Ñ—É–Ω–∫—Ü—ñ—è–º–∏\n‚¨áÔ∏è')
    return


@bot.message_handler(commands=['contact'])
def contact(message):
    bot.send_message(message.chat.id, "–®–∞–Ω–æ–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç!\n–ú–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—å –∑–∞ –∞–¥—Ä–µ—Å–æ—é: –º.–ö–∏–á–≤, –≤—É–ª.–•—Ä–µ—â–∞—Ç–∏–∫ "
                                      "46–ë\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +38 (068) 46-46-46-0\n\n"
                                      "–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: https://maps.app.goo.gl/kWHjA4NDz7Y3kfJz6")


@bot.message_handler(commands=['social_media'])
def social_media(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞—à–∏—Ö —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂ —Ç–∞ —Å–ª—ñ–¥–∫—É–π –∑–∞ –Ω–æ–≤–∏–Ω–∞–º–∏, "
                                      "—Ç—Ä–µ–Ω–¥–∞–º–∏ —Ç–∞ —Ü—ñ–∫–∞–≤–∏–º–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏ –≤—ñ–¥ –Ω–∞—à–∏—Ö —Ö–ª–æ–ø—Ü—ñ–≤ #centralyard\n\n<u><b>–ù–∞—à "
                                      "Website:</b></u> https://centralyard.com.ua/\n\n<u><b>–ù–∞—à Instagram:</b></u> "
                                      "https://www.instagram.com/central.yard46/\n\n<u><b>–ù–∞—à TikTok:</b></u> "
                                      "https://www.tiktok.com/@centralyardbarber\n\n–®–≤–∏–¥—à–µ –¥–æ–ª—É—á–∞–π—Å—è "
                                      "—Ç–∞ –æ—Ç—Ä–∏–º—É–π –º–∞–∫—Å–∏–º—É–º –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è –≤—ñ–¥ –Ω–∞—à–∏—Ö —Ç–∞–ª–∞–Ω–æ–≤–∏—Ç–∏—Ö –±–∞—Ä–±–µ—Ä—ñ–≤",
                     parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.startswith('grand_master_price_'))
def handle_price_grandmaster(call):
    index = int(call.data.split('_')[-1])
    excel_link = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRn9BG_Jqr6ouernSlnZGlKbV3159ZChYI_d_' \
                 'MlK-P0EkWVMxW5q-J5deHY5V-y3hQ-7_9DoGgLByLE/pub?output=xlsx'
    sheet_name = 'Grandmaster'
    response = requests.get(excel_link)
    excel_data = response.content
    df = pd.read_excel(BytesIO(excel_data), sheet_name=sheet_name)
    if index < len(df):
        row = df.iloc[index]
        haircut = row['–°—Ç—Ä–∏–∂–∫–∞']
        price = row['–¶—ñ–Ω–∞']
        worktime = row['–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å']
        bot.send_message(call.message.chat.id, f"<u><b>–í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Å–ª—É–≥—É:</b></u> {haircut}\n<u><b>–í–∞—Ä—Ç—ñ—Å—å "
                                               f"—Å–∫–ª–∞–¥–∞—î:</b></u>  {price} –≥—Ä–Ω.\n<u><b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å—Ç—Ä–∏–∂–∫–∏:</b></u> "
                                               f"{worktime}", parse_mode='HTML')
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É")


@bot.callback_query_handler(func=lambda call: call.data.startswith('master_price_'))
def handle_price_grandmaster(call):
    index = int(call.data.split('_')[-1])
    excel_link = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRn9BG_Jqr6ouernSlnZGlKbV3159ZChYI_d_' \
                 'MlK-P0EkWVMxW5q-J5deHY5V-y3hQ-7_9DoGgLByLE/pub?output=xlsx'
    sheet_name = 'Master'
    response = requests.get(excel_link)
    excel_data = response.content
    df = pd.read_excel(BytesIO(excel_data), sheet_name=sheet_name)
    if index < len(df):
        row = df.iloc[index]
        haircut = row['–°—Ç—Ä–∏–∂–∫–∞']
        price = row['–¶—ñ–Ω–∞']
        worktime = row['–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å']
        bot.send_message(call.message.chat.id, f"<u><b>–í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Å–ª—É–≥—É:</b></u> {haircut}\n<u><b>–í–∞—Ä—Ç—ñ—Å—å "
                                               f"—Å–∫–ª–∞–¥–∞—î:</b></u> {price} –≥—Ä–Ω.\n<u><b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å—Ç—Ä–∏–∂–∫–∏:</b></u> "
                                               f"{worktime}", parse_mode='HTML')
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É")


functions = {
    'price_grandmaster': price_grandmaster,
    'price_master': price_master,
    'Kozachuk_Andriy': Kozachuk_Andriy,
    'Munno_Nikola': Munno_Nikola,
    'Sergiy_Zaika': Sergiy_Zaika,
    'Viktor_Kozlovskyi': Viktor_Kozlovskyi,
    'Artem_Scherban': Artem_Scherban,
    'Dmytro_Zhurovets': Dmytro_Zhurovets,
    'Denis_Isaenko': Denis_Isaenko,
    'barber_info': barber_info

}


@bot.callback_query_handler(func=lambda call: True)
def handle_action(call):
    if call.data in functions:
        function_to_run = functions[call.data]
        function_to_run(call)


bot.polling(none_stop=True, interval=0)